[package]
name = "fuzzle-bot"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[lints.rust]

unused_must_use = "deny"
missing_copy_implementations = "deny"
missing_debug_implementations = "deny"
unsafe_code = "deny"
unused_mut = "deny"
unsafe_op_in_unsafe_fn = "deny"
deprecated_in_future = "deny"
elided_lifetimes_in_paths = "deny"
ffi_unwind_calls = "deny"
keyword_idents = "deny"
macro_use_extern_crate = "deny"
meta_variable_misuse = "deny"
trivial_casts = "deny"
trivial_numeric_casts = "deny"
unused_qualifications = "deny"
unused_macro_rules = "deny"
unused_tuple_struct_fields = "deny"

[lints.clippy]

disallowed_methods = "deny"
redundant_type_annotations = "deny"
partial_pub_fields = "deny"
style = "deny"
unwrap_in_result = "deny"
get_unwrap = "deny"
missing_const_for_fn = "deny"
same_name_method = "deny"
nursery = "deny"
map_err_ignore = "deny"
enum_glob_use = "deny"
assertions_on_result_states = "deny"
string_to_string = "deny"
perf = "deny"
create_dir = "deny"
format_push_string = "deny"
error_impl_error = "deny"
suspicious = "deny"
empty_drop = "deny"
exit = "deny"
expect_used = "deny"
if_then_some_else_none = "deny"
rc_buffer = "deny"
rc_mutex = "deny"
maybe_infinite_iter = "deny"
empty_structs_with_brackets = "deny"
let_underscore_untyped = "deny"
missing_asserts_for_indexing = "deny"
panic = "deny"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = 'abort'
strip = 'symbols'
overflow-checks = true  

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
    "dep:actix-files",
    "dep:actix-web",
    "dep:leptos_actix",
    "dep:cached",
    "dep:thiserror",
    "dep:emojis",
    "dep:rustdct",
    "dep:tempfile",
    "dep:chumsky",
    "dep:strsim",
    "dep:regex",
    "dep:rand",
    "dep:unicode-segmentation",
    "dep:base64",
    "dep:url",
    "dep:blake2",
    "dep:palette",
    "dep:image",
    "dep:nom",
    "dep:futures",
    "dep:pretty_env_logger",
    "dep:log",
    "dep:teloxide",
    "dep:toml",
    "dep:tokio",
    "dep:reqwest",
    "dep:flate2",
    "dep:csv",
    "dep:clap",
    "dep:chrono",
    "dep:anyhow",
    "dep:sqlx",
    "dep:hex",
    "dep:ring",
    "dep:actix-web-lab",
    "dep:once_cell",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
]

[dependencies]
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1"
http = { version = "0.2", optional = true }
leptos = { version = "0.6", features = ["nightly"] }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_actix = { version = "0.6", optional = true }
leptos_router = { version = "0.6", features = ["nightly"] }
wasm-bindgen = "=0.2.89"
anyhow = { version = "1.0.75", optional = true }
chrono = { version = "0.4.31", features = ["serde"], optional = true }
clap = { version = "4.4.7", features = ["derive", "env"], optional = true }
csv = { version = "1.3.0", optional = true }
flate2 = { version = "1.0.28", optional = true }
reqwest = { version = "0.11.22", default-features = false, features = ["rustls", "blocking", "hyper-rustls", "__rustls", "__tls", "rustls-tls"], optional = true }
serde = { version = "1.0.192", features = ["derive"] }
tokio = { version = "1.33.0", features = ["macros", "rt-multi-thread"], optional = true }
toml = { version = "0.8.8", optional = true }
teloxide = { version = "0.12", features = ["macros", "auto-send", "ctrlc_handler", "rustls", "throttle"], default-features = false, optional = true }
log = { version = "0.4", optional = true }
pretty_env_logger = { version = "0.5", optional = true }
futures = { version = "0.3.29", optional = true }
serde_json = "1.0.108"
itertools = "0.12.0"
nom = { version = "7.1.3", optional = true }
image = { version = "0.24.7", features = ["webp", "png", "jpeg_rayon", "jpeg"], default-features = false, optional = true }
palette = { version = "0.7.3", optional = true }
blake2 = { version = "0.10.6", optional = true }
url = { version = "2.5.0", optional = true }
base64 = { version = "0.21.5", optional = true }
unicode-segmentation = { version = "1.10.1", optional = true }
rand = { version = "0.8.5", optional = true }
regex = { version = "1.10.2", optional = true }
strsim = { version = "0.11.0", optional = true }
chumsky = { version = "0.9.3", optional = true }
tempfile = { version = "3.9.0", optional = true }
rustdct = { version = "0.7.1", optional = true }
sqlx = { version = "0.7.3", default-features = false, features = ["macros", "migrate", "sqlx-macros", "sqlite", "runtime-tokio", "chrono"], optional = true }
emojis = { version = "0.6.1", optional = true }
thiserror = { version = "1.0.56", optional = true }
cached = { version = "0.48.1", optional = true }
hex = { version = "0.4.3", optional = true }
ring = { version = "0.17.7", optional = true }
actix-web-lab = { version = "0.20.2", optional = true }
once_cell = { version = "1.19.0", optional = true }
serde_repr = "0.1.18"
tract-onnx = "0.21.1"
indexmap = "2.2.3"

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name   
output-name = "web"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg	
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

# the docker build script will add the bin-target-triple option below this line
